/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignatureServiceRouteImport } from './routes/signature-service'
import { Route as SignEdoRouteImport } from './routes/sign-edo'
import { Route as GosUslugiRouteImport } from './routes/gos-uslugi'
import { Route as DocumentRouteImport } from './routes/document'
import { Route as IndexRouteImport } from './routes/index'

const SignatureServiceRoute = SignatureServiceRouteImport.update({
  id: '/signature-service',
  path: '/signature-service',
  getParentRoute: () => rootRouteImport,
} as any)
const SignEdoRoute = SignEdoRouteImport.update({
  id: '/sign-edo',
  path: '/sign-edo',
  getParentRoute: () => rootRouteImport,
} as any)
const GosUslugiRoute = GosUslugiRouteImport.update({
  id: '/gos-uslugi',
  path: '/gos-uslugi',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentRoute = DocumentRouteImport.update({
  id: '/document',
  path: '/document',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/document': typeof DocumentRoute
  '/gos-uslugi': typeof GosUslugiRoute
  '/sign-edo': typeof SignEdoRoute
  '/signature-service': typeof SignatureServiceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/document': typeof DocumentRoute
  '/gos-uslugi': typeof GosUslugiRoute
  '/sign-edo': typeof SignEdoRoute
  '/signature-service': typeof SignatureServiceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/document': typeof DocumentRoute
  '/gos-uslugi': typeof GosUslugiRoute
  '/sign-edo': typeof SignEdoRoute
  '/signature-service': typeof SignatureServiceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/document'
    | '/gos-uslugi'
    | '/sign-edo'
    | '/signature-service'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/document' | '/gos-uslugi' | '/sign-edo' | '/signature-service'
  id:
    | '__root__'
    | '/'
    | '/document'
    | '/gos-uslugi'
    | '/sign-edo'
    | '/signature-service'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocumentRoute: typeof DocumentRoute
  GosUslugiRoute: typeof GosUslugiRoute
  SignEdoRoute: typeof SignEdoRoute
  SignatureServiceRoute: typeof SignatureServiceRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signature-service': {
      id: '/signature-service'
      path: '/signature-service'
      fullPath: '/signature-service'
      preLoaderRoute: typeof SignatureServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-edo': {
      id: '/sign-edo'
      path: '/sign-edo'
      fullPath: '/sign-edo'
      preLoaderRoute: typeof SignEdoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gos-uslugi': {
      id: '/gos-uslugi'
      path: '/gos-uslugi'
      fullPath: '/gos-uslugi'
      preLoaderRoute: typeof GosUslugiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/document': {
      id: '/document'
      path: '/document'
      fullPath: '/document'
      preLoaderRoute: typeof DocumentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocumentRoute: DocumentRoute,
  GosUslugiRoute: GosUslugiRoute,
  SignEdoRoute: SignEdoRoute,
  SignatureServiceRoute: SignatureServiceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
